/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.randomfqdn.homework.api;

import ru.randomfqdn.homework.model.Lessons;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-02T15:48:14.721923900+03:00[Europe/Moscow]")

@Validated
@Api(value = "lessons", description = "the lessons API")
public interface LessonsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /lessons : Lists all subjetcs
     * Lists all the subjects as an array of lesson objects without homework. Response is in JSON or XML, based on Accept header.
     *
     * @return List of lessons (status code 200)
     *         or No subjects for the current user. (status code 404)
     *         or Method not allowed. (status code 405)
     */
    @ApiOperation(value = "Lists all subjetcs", nickname = "lessonsGet", notes = "Lists all the subjects as an array of lesson objects without homework. Response is in JSON or XML, based on Accept header.", response = Lessons.class, tags={ "lesson", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of lessons", response = Lessons.class),
        @ApiResponse(code = 404, message = "No subjects for the current user."),
        @ApiResponse(code = 405, message = "Method not allowed.") })
    @RequestMapping(value = "/lessons",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Lessons> lessonsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"version\" : 1, \"lessons\" : [ { \"homework\" : [ { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }, { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 } ], \"name\" : \"name\", \"id\" : 0, \"time\" : [ \"time\", \"time\" ], \"day\" : [ \"day\", \"day\" ] }, { \"homework\" : [ { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }, { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 } ], \"name\" : \"name\", \"id\" : 0, \"time\" : [ \"time\", \"time\" ], \"day\" : [ \"day\", \"day\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <version>123</version> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
