/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.randomfqdn.homework.api;

import ru.randomfqdn.homework.model.Homework;
import ru.randomfqdn.homework.model.InlineResponse200;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-02T15:48:14.721923900+03:00[Europe/Moscow]")

@Validated
@Api(value = "homework", description = "the homework API")
public interface HomeworkApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /homework/{id} : Delete homework
     *
     * @param id  (required)
     * @return Homework deleted. (status code 200)
     *         or Homework with such id not found (status code 404)
     *         or Invalid input. (status code 405)
     */
    @ApiOperation(value = "Delete homework", nickname = "homeworkIdDelete", notes = "", tags={ "homework", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Homework deleted."),
        @ApiResponse(code = 404, message = "Homework with such id not found"),
        @ApiResponse(code = 405, message = "Invalid input.") })
    @RequestMapping(value = "/homework/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> homeworkIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /homework/{id} : Get the homework object
     *
     * @param id  (required)
     * @return The homework object (status code 200)
     *         or Homework with such id not found (status code 404)
     */
    @ApiOperation(value = "Get the homework object", nickname = "homeworkIdGet", notes = "", response = Homework.class, tags={ "homework", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The homework object", response = Homework.class),
        @ApiResponse(code = 404, message = "Homework with such id not found") })
    @RequestMapping(value = "/homework/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Homework> homeworkIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<homework> <id>123</id> <task>aeiou</task> <due>2000-01-23</due> </homework>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /homework/{id} : Update homework
     *
     * @param id  (required)
     * @param homework Homework object to be updated (optional)
     * @return Homework updated. (status code 200)
     *         or Validation failed (status code 400)
     *         or Homework with such id not found (status code 404)
     *         or Invalid input. (status code 405)
     */
    @ApiOperation(value = "Update homework", nickname = "homeworkIdPut", notes = "", response = Homework.class, tags={ "homework", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Homework updated.", response = Homework.class),
        @ApiResponse(code = 400, message = "Validation failed"),
        @ApiResponse(code = 404, message = "Homework with such id not found"),
        @ApiResponse(code = 405, message = "Invalid input.") })
    @RequestMapping(value = "/homework/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    default ResponseEntity<Homework> homeworkIdPut(@ApiParam(value = "",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Homework object to be updated"  )  @Valid @RequestBody(required = false) Homework homework) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<homework> <id>123</id> <task>aeiou</task> <due>2000-01-23</due> </homework>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /homework : Create new homework
     *
     * @param homework Homework object to be added (optional)
     * @return Lesson added. (status code 200)
     *         or Invalid input. (status code 405)
     */
    @ApiOperation(value = "Create new homework", nickname = "homeworkPost", notes = "", response = Homework.class, tags={ "homework", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lesson added.", response = Homework.class),
        @ApiResponse(code = 405, message = "Invalid input.") })
    @RequestMapping(value = "/homework",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<Homework> homeworkPost(@ApiParam(value = "Homework object to be added"  )  @Valid @RequestBody(required = false) Homework homework) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>123</id> <task>aeiou</task> <due>2000-01-23</due> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /homework/{subject} : List homework for subject
     *
     * @param subject  (required)
     * @return Homework for the specofied subject (status code 200)
     */
    @ApiOperation(value = "List homework for subject", nickname = "homeworkSubjectGet", notes = "", response = InlineResponse200.class, tags={ "homework", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Homework for the specofied subject", response = InlineResponse200.class) })
    @RequestMapping(value = "/homework/{subject}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> homeworkSubjectGet(@ApiParam(value = "",required=true) @PathVariable("subject") String subject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"homework\" : [ { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 }, { \"task\" : \"task\", \"due\" : \"2000-01-23\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
