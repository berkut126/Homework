/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.randomfqdn.homework.api;

import ru.randomfqdn.homework.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-02T15:48:14.721923900+03:00[Europe/Moscow]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /user/{login} : Deletes a user
     * Available only to admins and the users themselves
     *
     * @param login Login of user (required)
     * @return User deleted successfully (status code 200)
     *         or Not permitted (status code 400)
     *         or User not found (status code 404)
     *         or Validation failed (status code 405)
     */
    @ApiOperation(value = "Deletes a user", nickname = "userLoginDelete", notes = "Available only to admins and the users themselves", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User deleted successfully"),
        @ApiResponse(code = 400, message = "Not permitted"),
        @ApiResponse(code = 404, message = "User not found"),
        @ApiResponse(code = 405, message = "Validation failed") })
    @RequestMapping(value = "/user/{login}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> userLoginDelete(@ApiParam(value = "Login of user",required=true) @PathVariable("login") String login) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/login : Logs a user in.
     *
     * @param login  (required)
     * @param password  (required)
     * @return User logged in succesfully (status code 200)
     *         or Invalid login/password (status code 400)
     */
    @ApiOperation(value = "Logs a user in.", nickname = "userLoginGet", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User logged in succesfully"),
        @ApiResponse(code = 400, message = "Invalid login/password") })
    @RequestMapping(value = "/user/login",
        method = RequestMethod.GET)
    default ResponseEntity<Void> userLoginGet(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "login", required = true) String login,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{login} : Gets a user
     * Available only to admins
     *
     * @param login Login of user (required)
     * @return The user requested for (status code 200)
     *         or Not permitted (status code 400)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Gets a user", nickname = "userLoginGet", notes = "Available only to admins", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user requested for", response = User.class),
        @ApiResponse(code = 400, message = "Not permitted"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> userLoginGet(@ApiParam(value = "Login of user",required=true) @PathVariable("login") String login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"id\" : 0, \"login\" : \"login\", \"group\" : \"group\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/login : Logs a user in (with a form)
     *
     * @param login User-supplied login (optional)
     * @param passsword User-supplied password (optional)
     * @return User logged in succesfully (status code 200)
     *         or Invalid user login/password (status code 400)
     */
    @ApiOperation(value = "Logs a user in (with a form)", nickname = "userLoginPost", notes = "", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User logged in succesfully"),
        @ApiResponse(code = 400, message = "Invalid user login/password") })
    @RequestMapping(value = "/user/login",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> userLoginPost(@ApiParam(value = "User-supplied login") @RequestPart(value="login", required=false)  String login,@ApiParam(value = "User-supplied password") @RequestPart(value="passsword", required=false)  String passsword) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{login} : Avavilable only to admins and the users themselves
     * Update user&#39;s details
     *
     * @param login Login of user (required)
     * @param user New user data (optional)
     * @return User updated successfully (status code 200)
     *         or Not permitted (status code 400)
     *         or User not found (status code 404)
     *         or Validation failed (status code 405)
     */
    @ApiOperation(value = "Avavilable only to admins and the users themselves", nickname = "userLoginPut", notes = "Update user's details", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User updated successfully", response = User.class),
        @ApiResponse(code = 400, message = "Not permitted"),
        @ApiResponse(code = 404, message = "User not found"),
        @ApiResponse(code = 405, message = "Validation failed") })
    @RequestMapping(value = "/user/{login}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    default ResponseEntity<User> userLoginPut(@ApiParam(value = "Login of user",required=true) @PathVariable("login") String login,@ApiParam(value = "New user data"  )  @Valid @RequestBody(required = false) User user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"id\" : 0, \"login\" : \"login\", \"group\" : \"group\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<user> <id>123</id> <login>aeiou</login> <firstName>aeiou</firstName> <lastName>aeiou</lastName> <password>********</password> <group>aeiou</group> </user>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user : Create user
     * Can be only performed by user in \&quot;Admin\&quot; group
     *
     * @param user Homework object to be added (optional)
     * @return User created successfully (status code 200)
     *         or Not permitted. (status code 400)
     *         or Wrong data submitted. (status code 405)
     */
    @ApiOperation(value = "Create user", nickname = "userPost", notes = "Can be only performed by user in \"Admin\" group", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User created successfully", response = User.class),
        @ApiResponse(code = 400, message = "Not permitted."),
        @ApiResponse(code = 405, message = "Wrong data submitted.") })
    @RequestMapping(value = "/user",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    default ResponseEntity<User> userPost(@ApiParam(value = "Homework object to be added"  )  @Valid @RequestBody(required = false) User user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"password\" : \"password\", \"id\" : 0, \"login\" : \"login\", \"group\" : \"group\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>123</id> <login>aeiou</login> <firstName>aeiou</firstName> <lastName>aeiou</lastName> <password>********</password> <group>aeiou</group> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
